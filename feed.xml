<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yunicode</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://yuni.co/</id>
  <link href="http://yuni.co/"/>
  <link href="http://yuni.co/feed.xml" rel="self"/>
  <updated>2018-03-07T12:30:00+09:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>プログラミングを学んでおいて良かったと思う</title>
    <link rel="alternate" href="http://yuni.co/2018/03/07/technical-training.html"/>
    <id>http://yuni.co/2018/03/07/technical-training.html</id>
    <published>2018-03-07T12:30:00+09:00</published>
    <updated>2018-03-07T12:29:27+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;株式会社ロケットスタートに入社して、毎週月曜と木曜の二回、始業前の朝9:00〜10:00に、nanapi創業者元CTOの&lt;a href="https://twitter.com/wadap"&gt;wadap&lt;/a&gt;からプログラミングを教えてもらっていました。&lt;/p&gt;

&lt;p&gt;ロケットスタートにはデザイナーとして入社したのですが、始めの頃は本当にめちゃくちゃポンコツで何の役にも立てず「このままではわたしを雇ったことを経営陣全員が後悔してしまう！やばい！」と焦ったのがきっかけです。
当時の開発部はわたしとwadapのふたりだけだったので、プログラミングを理解することで少しでもコミュニケーションを円滑にできれば、という切実な願いでもありました。&lt;/p&gt;

&lt;p&gt;プログラミングのセンスには全く自信はありませんでしたが、wadapみたいなnanapiをひとりでサクッと作っちゃうすごいエンジニアにプログラミングのことを初めて教えてもらえるなんてラッキーすぎるし（しかも無料）（しかも終わると挽いた豆でコーヒーを淹れてくれる）頑張ってついていったのを覚えています。人生で一番まじめに予習と復習もした。&lt;/p&gt;

&lt;p&gt;内容はインターネットの仕組みという超初歩的なことから、PHP、DB、SQLまで広範囲に。&lt;/p&gt;

&lt;p&gt;いまのnanapiはRuby on Railsですが、当時はPHPだったのでPHPの基礎も学習。
ループ処理、if文から始め、最終的には自作の掲示板を作成するところまで一通りやってみました。
ページングをスクラッチで書くのは本当にキツかった。いまだから笑って話せますが、当時は本気泣きしたの覚えてます。
逆にDBを作って情報をぶっこみ、SQL叩いてデータ引っ張り出すあれこれはめっちゃ楽しかったです。&lt;/p&gt;

&lt;p&gt;&lt;img alt="01" width="50%" style="display:inline;" src="/images/2018/03/20100825181500.gif" /&gt;&lt;/p&gt;

&lt;p&gt;↑夜遅くにホワイトボードに書いてもらったページングのヒント。（基礎編なので脆弱性あり）このあとwadapとtakumixが飲みに連れて行って慰めてくれた、という話はまたどこかで。&lt;/p&gt;

&lt;p&gt;その後、ロケットスタートから株式会社nanapiになり入社する人数が増えても、入社した人（エンジニア以外）は全員wadapのプログラミング講座を受講する、という流れになりました。
編集でもディレクターでもデザイナーでもみんなです。
全員がバリバリにPHPを書けるようになる！というよりは、nanapiはどうやって動いているのか、エンジニアはどんなことをしているのか、などを理解して技術の目線を上げる、ということが目的でした。&lt;/p&gt;

&lt;p&gt;wadap自身も2014年にブログに書いてます。→　&lt;a href="http://wadap.hatenablog.com/entry/2014/04/30/094740"&gt;技術そのものがリスペクトされる風土がこれからは大事なんだと思う - UNIX的なアレ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;前提が長くなっちゃいましたが、という昔話をなぜしたくなったかというと、あれから、デザイナー、ディレクター、プロデューサー、と経験してきて
「あのときプログラミングを学んでおいてよかったなあ」ということがめっちゃあるなーっていうのと、
最近チームのエンジニアと話していてもそう思うことが多いので、ブログに書いてみることにしました。&lt;/p&gt;

&lt;p&gt;＜デザイナーの頃＞&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;実装についてエンジニアと話がしやすい&lt;/li&gt;
  &lt;li&gt;主にコーディングなどで先を読んで対応できる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;＜ディレクターの頃＞&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;やろうとしていることの先の処理が想像できる&lt;/li&gt;
  &lt;li&gt;データの扱い方について発想が広がる&lt;/li&gt;
  &lt;li&gt;開発の工数予想ができる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;＜プロデューサーの今＞&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;実装イメージの抽象度が下げられる&lt;/li&gt;
  &lt;li&gt;プロダクトで問題が起きたときに対処法を想像できる&lt;/li&gt;
  &lt;li&gt;所持しているデータについて理解し責任が取れる&lt;/li&gt;
  &lt;li&gt;各業務のコストダウンに関する発想ができる&lt;/li&gt;
  &lt;li&gt;その他各種コストが計算しやすい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と、ざっと出してみましたが、たぶんもっとある。学んでいなかったらできなかったことも多いです。&lt;/p&gt;

&lt;p&gt;もちろん、プログラムをがっつりと書くことはできませんが、知識として知っているだけでできることはすごく増えますし、円滑にできるコミュニケーションもめちゃくちゃ増えます。
エンジニアと話していて、わたしの知識が足りていないところは今もまだ当然あるけど、話をする上でベースがあるとないとでは全然違うな〜って思います。（まだまだだろ！と思ったエンジニアの人、ごめんね！精進いたします）&lt;/p&gt;

&lt;p&gt;本当に学んでおいて良いことしかなかったので、エンジニアじゃない人も知識として一通り薄くでもかじっておくと、
のちに自分のスキルの底上げや、サービスを作る上での土台になるのでおすすめです、という話でした。
Gitを使っている会社だったら、自分が使ってなくてもGitの概要ぐらいは理解してみるとなんかのときに役立つかもしれないです。&lt;/p&gt;

&lt;p&gt;いまはプログラミングを学ぶサービスなんかもたくさんあるので、わざわざ誰かに教えてもらわずとも学べるから良いですよね。（2010年はあんまなかった気がする）&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>違和感を無視しないで大事にする</title>
    <link rel="alternate" href="http://yuni.co/2018/02/27/facilitate-communication.html"/>
    <id>http://yuni.co/2018/02/27/facilitate-communication.html</id>
    <published>2018-02-27T12:51:00+09:00</published>
    <updated>2018-02-28T15:26:06+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;最近チームで話すときにファシリテーションで大事にしていることは「メンバーがどこで違和感を感じているのか」を注意深く見る、ということです。&lt;/p&gt;

&lt;p&gt;少しでも「( ･⊝･ )？」「( ˘•ω•˘ )？」って顔をするタイミングを見逃さない。&lt;/p&gt;

&lt;p&gt;チームのエンジニアは、納得していないとき、何か疑問が残るとき、は絶対に納得していない顔をします。でも本人は最初「何に違和感を感じているか」よくわかっていなかったりするので発言はしない。なのでここで必ず声を掛けます。そうして、その違和感を丁寧に拾い上げて紐解いていくと、実は他のメンバーがそれまで誰も気づいていなかった課題に辿り着いたりする。本人が始めからそれを「課題」として認識していなくても「なんか変だな」という違和感がアラートになり話すきっかけにできる。&lt;/p&gt;

&lt;p&gt;ここのシーンで見逃して先に進んでたら、結局後戻りになってまたここに来てたな、ということも少なくない。特に見落としていることがなかったとしても、そこの違和感についてきちんと話すことにより、本人の理解が深まり、腹落ち感がより得られるので、その先のコミュニケーションが少なくて済んだりします。&lt;/p&gt;

&lt;p&gt;【違和感を大事にするメリット】&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;話が進んでいるけど何か見落としていることに気づける&lt;/li&gt;
  &lt;li&gt;腹落ちせずに進んでしまうことを避けられる&lt;/li&gt;
  &lt;li&gt;チーム内で大きな齟齬が生まれない&lt;/li&gt;
  &lt;li&gt;腹落ち・納得することで熱量・コミット感が高まる&lt;/li&gt;
  &lt;li&gt;結果的にコミュニケーションコストが抑えられる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;【違和感を大事にするデメリット】&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;時間がかかるのでめんどくさく感じるときもある&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本質を理解しているとデメリットはさして問題じゃないので、ほぼメリットのみですね。違和感はすごく大事だと思います。幸い、いまのチームではそれを放置して前に進むことができない人ばかりなので、一見めんどくさく感じることもあるんですが、結果としてはそこがすごく安心できます。&lt;/p&gt;

&lt;p&gt;というわけで、長期的な戦略に取り組んでいく上では、こういうコミュニケーションにとことん投資した方が、先でのエラーが少なくて済み良いです、という話でした。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>構造的な文章を書くトレーニングはSlackでできる</title>
    <link rel="alternate" href="http://yuni.co/2018/02/22/slack-markdown.html"/>
    <id>http://yuni.co/2018/02/22/slack-markdown.html</id>
    <published>2018-02-22T11:12:00+09:00</published>
    <updated>2018-02-22T16:14:38+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;ロケットスタートという会社の頃、自分の言葉は話すことも書くことも、全く構造的ではありませんでした。&lt;/p&gt;

&lt;p&gt;たとえば誰かに何か相談をしても、まず最初に要点の整理を相手にしてもらってから本題、みたいになり、相談内容へ行く前の事前整理にすごく時間を使ってしまっていました。
ここをもっとできると、そのぶんの時間を肝心の相談内容や解決法に時間を割けるのでは、と思い、構造を整理しながら話す、ということを意識し始めました。
話すときだけでなく、文章にアウトプットをする場合も同じで構造的になるようにしています。&lt;/p&gt;

&lt;p&gt;構造的に文章が書けると、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;言いたいことが伝わりやすい&lt;/li&gt;
  &lt;li&gt;相手に何をしてほしいか伝わりやすい&lt;/li&gt;
  &lt;li&gt;記録に残しやすい（時間が経っても意味がわかる）&lt;/li&gt;
  &lt;li&gt;結果自分も相手も時間が節約できる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;みたいなメリットがあると思います。&lt;/p&gt;

&lt;p&gt;個人的に、マークダウンで書かれた文章が一番理解しやすい。文章を整理するという意味ではマークアップとほぼ同じなので、デザイナーやエンジニアの人には馴染みがあるのかな。
文章が整理され、要点をしっかり抑えることができ非常に良いです。いまはそこそこ書けるようになってきたと思います。&lt;/p&gt;

&lt;p&gt;構造的な文章を身につける手段としては、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;マークダウンで議事録をとる&lt;/li&gt;
  &lt;li&gt;Slackでの文章も構造を意識して送る&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の2点をやってます。&lt;/p&gt;

&lt;p&gt;マークダウンで議事録をとる、は議事録じゃなくてもいいんですが「話を聴きながらマークダウンで構造の整理しながらメモる」をやりまくるとだんだん整理をしながら話を聞く癖がつきます。
カンファレンスへ行ったときに実践するとか。余談ですがnanapiはQiita:Teamを導入しており、Qiitaはマークダウンに対応しているので、そのまま議事録をアップできて便利。このブログもマークダウンに対応してます。&lt;/p&gt;

&lt;p&gt;Slackで送るような短い文章も、構造を意識して書くようにしています。特に誰かに何かを依頼する場合。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;xxxで使われているyyyに関して、zzzしたいと考えておりまして今プロトタイプを作成しております。そのプロトタイプに関してご確認いただきたいのですが、aaaa日の午前11時〜お時間をいただくことは可能でしょうか？プロトタイプの内容に関してはその打ち合わせ前日にはお送りするようにします&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;↓&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;xxxで使われているyyyをzzzしたいと考えております。&lt;/p&gt;

  &lt;p&gt;プロトタイプを作成しましたので確認させてください。&lt;/p&gt;

  &lt;p&gt;確認いただきたいポイントは以下です。&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;ほげほげ&lt;/li&gt;
    &lt;li&gt;ふがふが&lt;/li&gt;
    &lt;li&gt;ぴよぴよ&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;mtgの日程は、aa日11:00はいかがでしょうか？&lt;/p&gt;

  &lt;p&gt;より詳細は追って前日にはお送りします。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;みたいな感じでしょうか。&lt;/p&gt;

&lt;p&gt;伝えたいことをだらだら書くのではなく、どうしたら簡潔にできるか。日々意識し積み重ねていくと、相手にも一層伝わりやすくなりますし、自身のトレーニングにもなり一石二鳥です。
nanapiチーム内でも、伝わらない文章だと相手の時間を無駄にしてしまうので、なるべくロスタイムを生まないような伝え方をしよう、と共有しています。&lt;/p&gt;

&lt;p&gt;しかしながら、すべての会話を構造的に意識してしまうと、それはそれでchannelが殺伐としてしまうので、適材適所というのはある。
エモい気持ちを伝えたいとき、エモいコンテンツをつくるときは、逆になにも意識しない方が伝わったりする場合もあるので、構造的な文章のすべてが正義というわけではないかなと思います。&lt;/p&gt;

&lt;p&gt;しょうもない失敗をしてメンバーに許してもらいたいときは、わざとバカな感じの発言をして許してもらってます！&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>どこの話をしているのか確認しながら話すと結果無駄な時間を抑えることができる</title>
    <link rel="alternate" href="http://yuni.co/2018/02/20/mtg-facilitate.html"/>
    <id>http://yuni.co/2018/02/20/mtg-facilitate.html</id>
    <published>2018-02-20T11:12:00+09:00</published>
    <updated>2018-02-22T16:14:38+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;nanapiメンバーでミーティングをするときにやってることを書いてみます。&lt;/p&gt;

&lt;p&gt;&lt;img alt="01" width="30%" style="display:inline;" src="/images/2018/02/2018_02_19_01.png" /&gt;&lt;/p&gt;

&lt;p&gt;いつも新しい何かを話すときは、最初に↑の図を書いて、これから何の話をしようとしているかを、一番上段のAから確認します。最初の5〜10分くらいです。特にC、具体的な手法の話をしようとしているときは特に意識してこの確認をします。&lt;/p&gt;

&lt;p&gt;目的は以下。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;上段にあるAとB「目的」「やり方」から順に確認していくことで「なぜやるのか」を再確認&lt;/li&gt;
  &lt;li&gt;手段の話で盛り上がりすぎるのを防ぐ（Cの話をする場合）&lt;/li&gt;
  &lt;li&gt;全員の熱量と目線の高さを合わせる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;よく見かける、戦略・作戦・戦術っぽいですが、そこまでちゃんとしたものでなくてもよくて「目的からちゃんとブレイクダウンした上で、これから何を話そうとしているか/何を話すべきか」だけわかれば良い。この図があると、より可視化できるのでサッと書いてます。&lt;/p&gt;

&lt;p&gt;これからCの具体的な施策（新機能の実装や、なんかキャンペーンとか）について話そうとしている場合、Cより上のAかBに空白、もしくは不透明なままの箇所があるなら、そこを埋めてからCの話したほうが良くない？というアラートにもなる。そこを空白にしたままそこより先の話をしてしまうと、すすんでからズレがわかり、場合によってはすごい後戻りになってしまうので。
密なコミュニケーションをとってる同士でも、あとになって齟齬が発覚して無駄な時間が発生する、ということがわりとあります。&lt;/p&gt;

&lt;p&gt;AとBのところが明確になって、じゃあ具体的なCの話をしようか、というときも、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AとBを実現するCは今から話そうとしているaでいいの？&lt;/li&gt;
  &lt;li&gt;その他にbやcになりうる案はないか検討した？&lt;/li&gt;
  &lt;li&gt;aとbとcがあったら本当にaが最適って明確なんだっけ？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;も、一応話しとく。「aを実装したらBが実現しそう」っていう手段やアセットから逆算で考えるのとか、勢いで「一旦aをまずは実装してみますか」みたいなのをやりがちなんですが、サービス開発ってそんなに簡単なものじゃないし、経験上ほとんどうまくいかない印象。趣味やサークル的な集まりだったらいいけど、自分は天才でもないんで仕事ではあんまりやっちゃだめなやり方だと思ってます。&lt;/p&gt;

&lt;p&gt;あと時々ブレストが白熱すると、どっか一箇所にフォーカスしてめちゃくちゃ話込んじゃったりするんですが、一旦落ち着いて↑の図で「今どこの話してるんだっけ？」を確認すると、いまそこの話をすべきかどうかが冷静にわかっていいです。Bを固めようとしているのに、まだ決まってもないbの案について白熱してもしかたないですからね…。そんなバカなことある？って感じなんですが意外にやってしまうんです、、&lt;/p&gt;

&lt;p&gt;そこはファシリテーターとかプロジェクトを引っ張るリーダーがズレのないように牽引せえよ、とも思いますが、誰かひとりだけがわかっててもみんながついてきてないとあんまり意味ない。プロジェクトはチームで進めるものなので、全員の腹落ちのためだったり、意識を揃える意味でも、毎回こういう丁寧な確認をしていく方が、結果無駄な時間を抑えられるんじゃないかなーと思います。&lt;/p&gt;

&lt;p&gt;今のチームのメンバーはこの辺の理解があり面倒臭がらず確認してくれるし、手段の目的化もやめようと意識しあってます。どのプロジェクト、チームにも応用できるものかはわかんないですが、今のチームではこのように進めていて結構うまくいっています、という話でした。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>これからのnanapiを考える</title>
    <link rel="alternate" href="http://yuni.co/2018/02/16/nanapi-renew.html"/>
    <id>http://yuni.co/2018/02/16/nanapi-renew.html</id>
    <published>2018-02-16T14:50:00+09:00</published>
    <updated>2018-02-22T16:14:38+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://nanapi.jp/"&gt;暮らしの情報サイトnanapi&lt;/a&gt;は、2009年9月から始まり、2018年の9月で丸9年です。&lt;/p&gt;

&lt;p&gt;わたしは、今いるSupership株式会社、の前身、株式会社nanapi、の前身、株式会社ロケットスタート、に入社してから、2018年で9年目になりました。ほぼnanapiと同じく時を過ごしているということになります。&lt;/p&gt;

&lt;p&gt;もともとnanapiは、ユーザーにレシピを書いてもらうというCGMスタイルで、わたしはそのうちの熱心なユーザーの一人でした。受託デザインしか経験のないなか、熱量のみでデザイナーとして5人目の社員として迎え入れていただき、最初の3年ぐらいはとんでもないポンコツでしたが、たくさんの人に支えられながらここまできて、今はnanapiのプロデューサーをしています。ずっとnanapiとともに、たくさんの人に出会い、いろんな歴史をみてきました。&lt;/p&gt;

&lt;p&gt;2015年にnanapi社がM&amp;amp;Aされ、カルチャーや事業内容に大きな変化が起き多くの人が去る中で、まだここにいます。いまだにぬるく残ってる、などと言われたりもしますが、実際そういう時期もありました。でもぬるく残るにはつらすぎることもたくさんあった。辞めたいと思って辞めようとしたこともあります。それらを乗り越えてここに残り、そしてずっとそこにあったnanapiを、もう一度このタイミングで、自分が中心となり再起させようと思っています。&lt;/p&gt;

&lt;p&gt;なぜ再起か。いまのnanapiはとても好調とは言えない状況で、それは昨年の年末にリニューアルしたときにCodeIQさんでも取材していただき別に隠してもないんですが、とにかくそんなにいい状態ではないです。数字的には、調子が良かった頃にいた人が見たらびっくりするぐらいかもしれない。2016年は本当にいろいろあったので。その辺もCodeIQ見てもらえばいいか。トップの写真がすごいノーテンキなんですが…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeiq.jp/magazine/2017/12/56381/"&gt;1年前のサイト存亡危機を乗り越え、「nanapi」が創業の原点に立ち返った大幅リニューアルへ｜CodeIQ MAGAZINE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;状況としてはそんな良くはないけれど、いろいろあったことが逆に追い風となり、ようやく「本当にnanapiの価値を提供する」という本質のところにテコを入れられそうです。今まではGoogle検索の延長上に存在していたnanapiですが、これからは「○○だったらnanapi」と言ってもらうものを作りたい。インターネット上に様々なメディアがある中で、こういうところはnanapiだよね、って思ってもらえるところを作り、価値提供していきたいです。いま、いろんな人に協力してもらながら設計・構築中。&lt;/p&gt;

&lt;p&gt;nanapiのツイッターの方はなかなか好調だったりします。フォロワーも10万を超え、ユーザーさんともいい感じでコミュニケーションがはかれています。需要があるのはやっぱり季節もの。シーズナルに関するコンテンツがツイッター上では必要とされています。nanapiは生活や暮らしの情報サイトなので、バズったりするような派手さはないものの、必要なときに必要な情報をいい感じに届けること（わたしたちはそれを「実家感」と呼んでいる）が使命なんじゃないかなあと。何か大きなアクションを示したりはできないんですが、実際にこれをどう届ければいいのか、を小さく検証しながら、今後の大きな強みにしていければと思います。&lt;/p&gt;

&lt;p&gt;ツイッターを介してユーザーさんとコミュニケーションをとってみると、こちらが発信した情報に対して返ってくる反応の中に、有益なものが含まれていることに気づきます。普通の人の何気ないひとことなんですけど、こちら側では気づけなかった光るものが混ざってる。nanapiとして提供する情報に、そんなユーザーの方からもらった新たな情報を付加価値として追加していけると、そのレシピを次に見た人がもっと良い体験をできるんじゃないかと。ただ情報を発信しコンテンツを消費していくだけでなく、それぞれに価値を持たせて蓄積していく、蓄積したものを良きタイミングで提供する、をnanapiならではのやり方で実現できればいいなあと思っています。&lt;/p&gt;

&lt;p&gt;「○○だったらnanapi」を築き上げるのはもちろん大変。きっと時間もかかる。特段派手でもないことを地道にやり続けていくことは一見つまんなくも見えたりもする。でもいまは、メディアもブランドが信頼が大事で、それを獲得するには高い熱量で地道にやり続けるしかない、という時代が来ている気もします。もう量産とかハックとか思いつきとかではやれない時代なんじゃないかなーと。いまはnanapiを理解してサポートしてくれる人たちもいるし、足の長い戦略を理解して日々足元を固めてくれるメンバーもいて、なんかできそうな気がします。自分たちの中の正義を定義して設計し考え抜きやり通す、の繰り返し、をみんなとやりたい。あと、ここまで共にきたんだからという意地と、勝手な責任みたいなものもあったりなかったり。&lt;/p&gt;

&lt;p&gt;というわけで、12/20に全面リニューアルした以外、外からはあんまり見えないんですがこんなことを考えて日々がんばっていますよということを書いてみました。本質を考え直すのはすごい楽しいです。これからはそのチーム内でのあれこれや、プロジェクトを進めていく上でのあれこれなんかを、記録という意味も込めてブログに記していけたらいいなあと思ってます。初回なので長くなりましたが、、&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>久しぶりに書きました</title>
    <link rel="alternate" href="http://yuni.co/2018/02/14/nanapi-team.html"/>
    <id>http://yuni.co/2018/02/14/nanapi-team.html</id>
    <published>2018-02-14T13:12:00+09:00</published>
    <updated>2018-02-22T16:14:38+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;超ひさしぶりにブログを更新してみた。今日はひろぽせんぱい（このブログ構築を手伝ってくれたエンジニア）の誕生日です。&lt;/p&gt;

&lt;p&gt;それにしても、更新するたびにdeployしなきゃいけないブログってなんなんだろう…　使いやすいブログシステムは世の中にいくらでもあるというのに。2018年のやることか？！&lt;/p&gt;

&lt;p&gt;もう少し気軽に更新できるよう、middlemanからはてなブログとかに移行したいけども、それもまた面倒なので、しばらくはこのまま運用していきたいと思います。2017年は見事に一本も更新しなかったので猛省しつつ、今年はきちんとアウトプットしていければと。&lt;/p&gt;

&lt;p&gt;今年もどうぞよろしくお願いいたします。がんばるぞ！&lt;/p&gt;
</content>
  </entry>
</feed>
